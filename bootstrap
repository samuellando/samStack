#!/bin/sh
if [[ $# -ne 4 ]]; then
  echo "Please pass project name"
  echo "Please pass organization id"
  echo "Please pass region"
  echo "Please pass destination"
  exit -1
fi

wd=$4
sr=$(pwd)

echo "###### Createing Svelte app ######"
node svelte.js $1

echo "###### Moving project folder ######"
mv $1 $wd/

echo "###### Copying additional files ######"
cp -r files/. $wd/$1

echo "###### Swapping default page ######"
rm $wd/$1/src/routes/+page.svelte
cp +page.svelte $wd/$1/src/routes/
cp +layout.ts $wd/$1/src/routes/

cd $wd/$1

echo "###### Swapping placeholders ######" 
o='s/\[PROJECT_ID\]/'
t='/g'
sed -i "$o$1$t" main.py
sed -i "$o$1$t" runlocal.sh

echo "###### Installing node dependencies ######"
npm install 
npm install @sveltejs/adapter-static

echo "###### Setting up python virtual environment ######"
python -m venv venv

echo "###### Installing python dependencies ######"
source venv/bin/activate
pip install -r requirements.txt

echo "###### Initializing git repo ######"
git init
git add .
git commit -am "Initial commit"

echo "###### Creating cloud skeleton GCP project ######"
gcloud projects create $1 --organization=$2
gcloud services enable appengine.googleapis.com --project=$1
gcloud app create --region=$3 --project=$1
gcloud firestore databases create --region=$3 --project=$1

echo "###### Adding sample data to firestore (waiting 5 minutes) ######"
sleep 300
python $sr/addsample.py $1 

echo "###### Creating service account and getting key ######"
gcloud iam service-accounts create development --project=$1
gcloud iam service-accounts keys create key.json --iam-account=development@$1.iam.gserviceaccount.com
gcloud projects add-iam-policy-binding $1 --member=serviceAccount:development@$1.iam.gserviceaccount.com --role=roles/datastore.user

echo "###### DONE ######"
cat << EOF



 - bootstrap conplete.
 - To run frontened in dev mode:
   - npm run dev
 - To run backend in dev mode: 
   - source venv/bin/activate
   - python main.py
 - To run both in dev mode:
   - ./rundev.sh
 - To run build locally (in docker): 
   - ./runlocal.sh
 - To deploy:
   - gcloud config set project $1
   - gcloud run deploy
 - I recommend you set up a cloud build automation with cloud build.
EOF
